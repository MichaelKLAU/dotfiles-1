" This section is added for Vundle from [this link](https://github.com/gmarik/vundle/blob/master/README.md#quick-start)
" Begin Vundle section

set nocompatible               " be iMproved
filetype on
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
"Bundle 'tpope/vim-fugitive'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
" ...

Bundle 'vimoutliner/vimoutliner'
" to add Vim-markdown support
Bundle 'tpope/vim-markdown'
" to view and change file outline
Bundle 'VOoM'
" to quickly find file in the path and buffers with fuzzy find support
Bundle 'kien/ctrlp.vim'
" to have auto close feature
Bundle 'Townk/vim-autoclose'
" to make quoting and parenthesizing easier
Bundle 'tpope/vim-surround'
" to draw ASCII art in Vim
Bundle 'DrawIt'
" Vim regex tutor
Bundle 'dahu/VimRegexTutor'
" Vim syntax file for tmux configuration
Bundle 'zaiste/tmux.vim'
" to browse the undo tree
Bundle 'sjl/gundo.vim'
" my todo plugin
Bundle 'talha131/todo-plus'
" maze generator for practising hjkl in Vim
Bundle 'dahu/Vimazing'
" WriteRoom like env in Vim http://projects.mikewest.org/vimroom/ 
Bundle 'mikewest/vimroom'
" inserts code snippets
Bundle 'msanders/snipmate.vim'
" Syntax checking
Bundle 'scrooloose/syntastic'
" integrates Python documentation system into Vim
Bundle 'fs111/pydoc.vim'
" Use rope -Python refactoring library
Bundle 'sontek/rope-vim'
" jedi autocompletion library for VIM
Bundle 'davidhalter/jedi-vim'
" tree explorer
Bundle 'scrooloose/nerdtree'
" style checker
Bundle 'nvie/vim-flake8'
" Powerline
Bundle 'Lokaltog/powerline'
" Easy motion. Allows you to jump to motion or search targets with single key
" press
Bundle 'Lokaltog/vim-easymotion'
" Work with shell commands inside Vim. Pipe file contents to shell commands or
" run shell commands on file content.
Bundle 'sjl/clam.vim'
" A Suggested Path for Learning Vim
Bundle 'dahu/LearnVim'
" Create a new file, write .LOG as the first line and save it. Every time you reopen the file, a new line with the current timestamp is added, so you can easily maintain a chronologic log of your tasks. 
Bundle 'logpad.vim'

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

" End Vundle section 

autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown

" set fonts
if has("win32")
   set guifont=Lucida_Console:h11:cANSI
"  set guifont=Courier_NEW:h11:cANSI
else
  set guifont=Menlo\ for\ Powerline:h12
endif

" make sure horizontal scroll bar is visible 
set guioptions+=b

if !has("gui_running")
  set term=screen-256color
endif

set number
set expandtab
set wrap
syntax on
set autoindent
set softtabstop=4
set shiftwidth=4

" write undo history to file so that undo history remains persistent
set undofile
" Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set backup
" Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set writebackup
" Use a swapfile for the buffer.
set swapfile

" directory for backup files
set backupdir^=~/.vimTemp//
" directory for swap files
set directory^=~/.vimTemp//
" directory for undo history 
set undodir^=~/.vimTemp//

" remember x number of commands executed previously
set history=100

"set background=dark
"let g:zenburn_alternate_Visual = 1
"colorscheme zenburn 
colorscheme beauty256Talha

"Always show current position
set ruler

" highlight search results
set hlsearch
" Makes search incremental 
set incsearch

" Enable spell check
set spell
" highlight spelling mistakes
highlight clear SpellBad
highlight SpellBad cterm=underline, ctermfg=red 
highlight SpellBad gui=undercurl, guisp=red
highlight clear SpellCap
highlight SpellCap cterm=underline,bold, ctermfg=green
highlight SpellCap gui=undercurl guisp=DarkCyan

" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu

" for :shell, from [SO answer](http://stackoverflow.com/a/12273438/177116)
" Otherwise I get error 
" > __git_ps1: command not found
set shell=bash\ --rcfile\ ~/.bashrc

" for ctrlp 
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <c-p>o :CtrlPBuffer<CR>
nmap <c-p>l :CtrlPMRUFiles<CR>
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 30
let b:ctrlp_working_path_mode = 'c'
let g:ctrlp_dotfiles = 0
" ignore ~/Library|Google Drive ... and files which have pdf, epub ... extension
let g:ctrlp_custom_ignore = $HOME.'/\(Library\|Google Drive\|Music\|Movies\|Pictures\|Documents\)\|.\(pdf\|epub\|mobi\|rar\|png\|jpg\|dmg\|nib\|bz\|gz\|tar\|xib\)$'

" for gundo plugin
let g:gundo_preview_bottom=1
let g:gundo_preview_height=25
let g:gundo_close_on_revert=1

" add angle bracket and pipe to the list to auto close pairs
let g:AutoClosePairs_add = "<> |"

" vim room settings
let g:vimroom_guibackground = "White"

" Vim as Python IDE
set foldmethod=indent
set foldlevel=99

" Powerline
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
set laststatus=2 " Always display the statusline in all windows
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
let g:Powerline_symbols = 'fancy'

" highlight 72th column in git commit
autocmd FileType gitcommit set colorcolumn=72

