"{{{ Begin Vundle section

set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-sensible'
" Live browser editing for Vim
Plugin 'jaxbot/browserlink.vim'
"{{{ Plugins - Code Complete and Snippets
" A code-completion engine
Plugin 'Valloric/YouCompleteMe'
" inserts code snippets
Plugin 'SirVer/ultisnips'
" collection of code snippets
Plugin 'honza/vim-snippets'
Plugin 'mattn/emmet-vim'
"}}}
"{{{ Plugins - Document Outline
" View and change file outline
Plugin 'VOoM'
" browse the tags of source code files. TagbarToggle
Plugin 'majutsushi/tagbar'
"}}}
"{{{ Plugins - Distraction Free Writing
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
" focus on a region and make the rest inaccessible
Plugin 'chrisbra/NrrwRgn'
"}}}
"{{{ Plugins - File Navigation
" Quickly find file in the path and buffers with fuzzy find support
Plugin 'kien/ctrlp.vim'
" Tree explorer
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
"}}}
"{{{ Plugins - Learn Vim
" A Suggested Path for Learning Vim
Plugin 'dahu/LearnVim'
" Vim regex tutor
Plugin 'dahu/VimRegexTutor'
" maze generator for practising hjkl in Vim
Plugin 'dahu/Vimazing'
"}}}
"{{{ Plugins - Motion Enhancements
" Easy motion. Allows you to jump to motion or search targets with single key press
Plugin 'Lokaltog/vim-easymotion'
"}}}
"{{{ Plugins - Session Management
Plugin 'xolox/vim-session'
" vim-session requirement
Plugin 'xolox/vim-misc'
" Delete buffers and close files without messing up your layout
Plugin 'moll/vim-bbye'
"}}}
"{{{ Plugins - Syntax files and Programming Languages
Plugin 'zaiste/tmux.vim'
Plugin 'tpope/vim-markdown'
Plugin 'jinja'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'klen/python-mode'
Plugin 'dag/vim-fish'
Plugin 'fatih/vim-go'
"}}}
"{{{ Plugins - Typing Utilities
" Auto close feature
Plugin 'Raimondi/delimitMate'
" to make quoting and parenthesizing easier
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
" comments plugin
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-endwise'
"}}}
"{{{ Plugins - User Interface
" Airline statusline
Plugin 'bling/vim-airline'
" Add font icons
Plugin 'ryanoasis/vim-devicons'
"}}}
"{{{ Plugins - Utilities and Wrappers
" Draw ASCII art in Vim
Plugin 'DrawIt'
" Work with shell commands inside Vim. Pipe file contents to shell commands or run shell commands on file content.
Plugin 'sjl/clam.vim'
" Git wrapper
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
"}}}
"{{{ Plugins - Version Control and File Comparision
" Enhanced Diff for git diff --patience
Plugin 'chrisbra/vim-diff-enhanced'
" Browse the undo tree
Plugin 'sjl/gundo.vim'
"}}}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" End Vundle section }}}

syntax on
set autochdir
set autoindent
set expandtab
set guioptions+=b " make sure horizontal scroll bar is visible
set history=100 " remember x number of commands executed previously
set number
set ruler "Always show current position
set shiftwidth=4
set softtabstop=4
set tabstop=4
set wrap

"{{{ Search settings
set hlsearch " highlight search results
set incsearch " Makes search incremental
set ignorecase
"}}}

"{{{ Save command history, file backup and swap in a directory
" write undo history to file so that undo history remains persistent
set undofile
" Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set backup
" Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set writebackup
" Use a swapfile for the buffer.
set swapfile

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif
" directory for backup files
set backupdir^=~/.vimTemp//
" directory for swap files
set directory^=~/.vimTemp//
" directory for undo history
set undodir^=~/.vimTemp//
"}}}

"{{{ Spell Check
set spell " Enable spell check
highlight clear SpellBad
highlight SpellBad cterm=underline, ctermfg=red
highlight SpellBad gui=undercurl, guisp=red
highlight clear SpellCap
highlight SpellCap cterm=underline,bold, ctermfg=green
highlight SpellCap gui=undercurl guisp=DarkCyan
"}}}

"{{{ Command Line Completion
" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu
"}}}

"{{{ Disable Beeping
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif
"}}}

"{{{ Set theme and font
colorscheme lucario
if has("win32")
    set guifont=Lucida_Console:h11:cANSI
else
    set guifont=Inconsolata\ for\ Powerline\ Plus\ Nerd\ File\ Types:h14
endif

if !has("gui_running")
  set term=screen-256color
endif
"}}}

autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown
autocmd FileType gitcommit set colorcolumn=72 " highlight 72th column in git commit
autocmd FileType vim set foldmethod=marker

"{{{ CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <c-p>o :CtrlPBuffer<CR>
nmap <c-p>l :CtrlPMRUFiles<CR>
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 30
let b:ctrlp_working_path_mode = 'ra'
let g:ctrlp_dotfiles = 0
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$
            \ |(Desktop|Libary|Music|Movies|Pictures)',
            \ 'file': '\v\.(jpg|png|gif|psd|jpeg
            \ |exe|so|o|dat|dmg|nib|xib|bat|egg|cer|DS_Store|pkg
            \ |tar|bz|gz|zip|rar|iso|cdr|bz2
            \ |mp3|mp4|mov|avi|flv|torrent|wmv
            \ |pdf|epub|mobi|chm|doc|docx|lit|gdoc)$'
            \ }
"}}}

"{{{ Gundo
let g:gundo_preview_bottom=1
let g:gundo_preview_height=25
let g:gundo_close_on_revert=1
"}}}

"{{{ Airline statusline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'
set laststatus=2 " solves vim-airline status bar not shown when only single file is open
"}}}

"{{{ NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.jpg$']
let blacklist = ['gitcommit',  'gitrebase', 'diff']
autocmd vimenter * if index(blacklist, &ft) < 0 | NERDTree
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"}}}

"{{{ ultisnips
let g:UltiSnipsExpandTrigger = '<c-tab>'
let g:UltiSnipsListSnippets = '<m-tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'my_UltiSnips' ]
set rtp+=~/.vim/my_snippets
"}}}

"{{{ Voom
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
autocmd FileType voomtree setlocal nonumber
"}}}

"{{{ You Complete Me
let g:ycm_server_keep_logfiles=1
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
"}}}

"{{{ xolox/vim-session
:let g:session_autosave = 'no'
"}}}

"{{{ Limelight and Goyo - Distraction Free Writing
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!
"}}}

"{{{ TagBar definitions for Obj-C and CSS
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_objcpp = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
"}}}

