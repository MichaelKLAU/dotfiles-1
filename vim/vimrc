"{{{ Begin Vundle section

set nocompatible               " be iMproved
filetype on
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
" to add Vim-markdown support
Bundle 'tpope/vim-markdown'
" A code-completion engine
Bundle 'Valloric/YouCompleteMe'
" to view and change file outline
Bundle 'VOoM'
" to quickly find file in the path and buffers with fuzzy find support
Bundle 'kien/ctrlp.vim'
" to have auto close feature
Bundle 'Raimondi/delimitMate'
" to make quoting and parenthesizing easier
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
" to draw ASCII art in Vim
Bundle 'DrawIt'
" Vim regex tutor
Bundle 'dahu/VimRegexTutor'
" Vim syntax file for tmux configuration
Bundle 'zaiste/tmux.vim'
" to browse the undo tree
Bundle 'sjl/gundo.vim'
" maze generator for practising hjkl in Vim
Bundle 'dahu/Vimazing'
Bundle 'junegunn/goyo.vim'
Bundle 'junegunn/limelight.vim'
" Syntax checking
" Bundle 'scrooloose/syntastic'
" integrates Python documentation system into Vim
Bundle 'fs111/pydoc.vim'
" Use rope -Python refactoring library
" Bundle 'sontek/rope-vim'
" tree explorer
Bundle 'scrooloose/nerdtree'
" style checker
" Bundle 'nvie/vim-flake8'
" Airline statusline
Bundle 'bling/vim-airline'
" Easy motion. Allows you to jump to motion or search targets with single key
" press
Bundle 'Lokaltog/vim-easymotion'
" Work with shell commands inside Vim. Pipe file contents to shell commands or
" run shell commands on file content.
Bundle 'sjl/clam.vim'
" A Suggested Path for Learning Vim
Bundle 'dahu/LearnVim'
" focus on a region and make the rest inaccessible
Bundle 'chrisbra/NrrwRgn'
" Git wrapper
Bundle 'tpope/vim-fugitive'
" inserts code snippets
Bundle 'SirVer/ultisnips'
" collection of code snippets
Bundle 'honza/vim-snippets'
" browse the tags of source code files. TagbarToggle
Bundle 'majutsushi/tagbar'
" comments plugin
Bundle 'tomtom/tcomment_vim'
" session management
Bundle 'xolox/vim-session'
" vim-session requirement
Bundle 'xolox/vim-misc'
" Delete buffers and close files without messing up your layout
Bundle 'moll/vim-bbye'
" Themes
Bundle 'jnurmine/Zenburn'
Bundle 'altercation/vim-colors-solarized'
Bundle 'klen/python-mode'
Bundle 'jinja'
" Enhanced Diff for git diff --patience
Bundle 'chrisbra/vim-diff-enhanced'

filetype plugin indent on     " required!

" End Vundle section }}}

autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown

" set fonts
if has("win32")
   set guifont=Lucida_Console:h11:cANSI
else
  set guifont=Menlo\ Regular\ for\ Powerline:h11
endif

" make sure horizontal scroll bar is visible
set guioptions+=b

if !has("gui_running")
  set term=screen-256color
endif

set number
set expandtab
set wrap
syntax on
set autoindent
set softtabstop=4
set shiftwidth=4
set tabstop=4

"{{{ Save command history, file backup and swap in a directory
" write undo history to file so that undo history remains persistent
set undofile
" Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set backup
" Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set writebackup
" Use a swapfile for the buffer.
set swapfile

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif
" directory for backup files
set backupdir^=~/.vimTemp//
" directory for swap files
set directory^=~/.vimTemp//
" directory for undo history
set undodir^=~/.vimTemp//
"}}}

" remember x number of commands executed previously
set history=100

"Always show current position
set ruler

" highlight search results
set hlsearch
" Makes search incremental
set incsearch
set ignorecase

" Enable spell check
set spell
" highlight spelling mistakes
highlight clear SpellBad
highlight SpellBad cterm=underline, ctermfg=red
highlight SpellBad gui=undercurl, guisp=red
highlight clear SpellCap
highlight SpellCap cterm=underline,bold, ctermfg=green
highlight SpellCap gui=undercurl guisp=DarkCyan

" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu

"{{{ CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <c-p>o :CtrlPBuffer<CR>
nmap <c-p>l :CtrlPMRUFiles<CR>
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 30
let b:ctrlp_working_path_mode = 'ra'
let g:ctrlp_dotfiles = 0
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$
            \ |(Desktop|Libary|Music|Movies|Pictures)',
            \ 'file': '\v\.(jpg|png|gif|psd|jpeg
            \ |exe|so|o|dat|dmg|nib|xib|bat|egg|cer|DS_Store|pkg
            \ |tar|bz|gz|zip|rar|iso|cdr|bz2
            \ |mp3|mp4|mov|avi|flv|torrent|wmv
            \ |pdf|epub|mobi|chm|doc|docx|lit|gdoc)$'
            \ }
"}}}

"{{{ Gundo
let g:gundo_preview_bottom=1
let g:gundo_preview_height=25
let g:gundo_close_on_revert=1
"}}}

" Vim as Python IDE
set foldmethod=indent
set foldlevel=99

"{{{ Airline statusline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'
"}}}

" highlight 72th column in git commit
autocmd FileType gitcommit set colorcolumn=72

"{{{ NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.jpg$']
let blacklist = ['gitcommit',  'gitrebase', 'diff']
autocmd vimenter * if index(blacklist, &ft) < 0 | NERDTree
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"}}}

"{{{ ultisnips
let g:UltiSnipsExpandTrigger = '<c-tab>'
let g:UltiSnipsListSnippets = '<m-tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'my_UltiSnips' ]
set rtp+=~/.vim/my_snippets
"}}}

"{{{ Voom
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
autocmd FileType voomtree setlocal nonumber
"}}}

"{{{ You Complete Me
let g:ycm_server_keep_logfiles=1
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
"}}}

" Vim Session
:let g:session_autosave = 'no'

"{{{ Limelight and Goyo - Distraction Free Writing
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!
"}}}

"{{{ TagBar definitions for Obj-C and CSS
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_objcpp = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
"}}}

" Theme
colorscheme github
set background=light

set autochdir
