"{{{ Install Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
"}}}

"{{{ Begin Plugins section
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
"{{{ Plugins - Code Complete and Snippets
" A code-completion engine
Plug 'Valloric/YouCompleteMe'
" inserts code snippets
Plug 'SirVer/ultisnips'
" collection of code snippets
Plug 'honza/vim-snippets'
Plug 'mattn/emmet-vim'
"}}}
"{{{ Plugins - File Navigation
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Quickly find file in the path and buffers with fuzzy find support
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
"}}}
"{{{ Plugins - Motion Enhancements
Plug 'justinmk/vim-sneak' " Use s{char}{char} or S{char}{char} 
"}}}
"{{{ Plugins - Session Management
Plug 'xolox/vim-misc' | Plug 'xolox/vim-session' 
Plug 'moll/vim-bbye' " Delete buffers and close files without messing up your layout
"}}}
"{{{ Plugins - Syntax files and Programming Languages
Plug 'Chiel92/vim-autoformat'
Plug 'sheerun/vim-polyglot'
"}}}
"{{{ Plugins - Typing Utilities
Plug 'tpope/vim-rsi' " Readline key bindings
Plug 'tommcdo/vim-lion' " Align text by some character
Plug 'tpope/vim-characterize' " press ga to reveal characters representation in decimal, octal and hex
Plug 'junegunn/vim-peekaboo' " show content of register
Plug 'Raimondi/delimitMate' " Auto close feature
Plug 'tpope/vim-surround' " to make quoting and parenthesizing easier
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary' " toggle comments
Plug 'tpope/vim-endwise'
Plug 'terryma/vim-multiple-cursors'
"{{{ Plugins - Distraction Free Writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'chrisbra/NrrwRgn' " focus on a region and make the rest inaccessible. Select and call :NR
"}}}
"{{{ Plugins - Document Outline
Plug 'VOoM' " View and change file outline
Plug 'taglist.vim' " browse the tags of source code files. TagbarToggle
Plug 'majutsushi/tagbar'
"}}}
"}}}
"{{{ Plugins - Utilities and Wrappers
Plug 'DrawIt' " Draw ASCII art in Vim
Plug 'tpope/vim-eunuch' " Wrapper for UNIX shell commands
Plug 'henrik/vim-indexed-search' " Show 'Match 123 of 456 <search term>' in Vim searches
Plug 'osyo-manga/vim-over' " :substitute preview
Plug 'romainl/vim-qf' " a collection of settings, commands and mappings for the quickfix window
Plug 'romainl/vim-qlist' " make include-search and definition-search populate in the quickfix window
Plug 'wakatime/vim-wakatime'
"}}}
"{{{ Plugins - Version Control and File Comparison
Plug 'chrisbra/vim-diff-enhanced' " Enhanced Diff for git diff --patience
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'junegunn/gv.vim' " Git commit browser
Plug 'mbbill/undotree' " Browse the undo tree
"}}}
"{{{ Plugins - Theme
Plug 'dracula/vim'
"}}}

" All of your Plugins must be added before the following line
call plug#end()            " required
" End Plugins section }}}

"{{{ Custom Functions
" from https://www.vi-improved.org/recommendations/
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
"}}}

set expandtab
set guioptions+=b " make sure horizontal scroll bar is visible
set number
set shiftwidth=4
set softtabstop=4
set tabstop=4
set wrap
set ignorecase " Search settings
set spell " Enable spell check
set undofile " write undo history to file so that undo history remains persistent
set backup " Make a backup before overwriting a file.  Lcave it around after the file has been successfully written.
set writebackup " Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set swapfile " Use a swapfile for the buffer.

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif

set backupdir^=~/.vimTemp// " directory for backup files
set directory^=~/.vimTemp// " directory for swap files
set undodir^=~/.vimTemp// " directory for undo history

"{{{ Spell Check
highlight clear SpellBad
highlight SpellBad cterm=underline, ctermfg=red
highlight SpellBad gui=undercurl, guisp=red
highlight clear SpellCap
highlight SpellCap cterm=underline,bold, ctermfg=green
highlight SpellCap gui=undercurl guisp=DarkCyan
"}}}

"{{{ Command Line Completion
" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu
"}}}

"{{{ Disable Beeping
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif
"}}}

"{{{ Set theme and font
color dracula
if has("win32")
    set guifont=Lucida_Console:h11:cANSI
else
    set guifont=Inconsolata\ for\ Powerline\ Plus\ Nerd\ File\ Types:h14
endif

if !has("gui_running")
  set term=screen-256color
endif
"}}}

autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown
autocmd FileType gitcommit set colorcolumn=72 " highlight 72th column in git commit
autocmd FileType vim set foldmethod=marker

"{{{ vim-autoformat
let g:formatdef_fmt_custom_xml = '"tidy -xml -q --show-errors 0 --show-warnings 0 --indent-attributes 1"'
let g:formatters_xml = ['fmt_custom_xml']
let g:autoformat_verbosemode=1
"}}}

"{{{ ultisnips
let g:UltiSnipsExpandTrigger = '<c-tab>'
let g:UltiSnipsListSnippets = '<m-tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'my_UltiSnips' ]
set rtp+=~/.vim/my_snippets
"}}}

"{{{ Voom
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
autocmd FileType voomtree setlocal nonumber
"}}}

"{{{ You Complete Me
let g:ycm_server_keep_logfiles=1
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
"}}}

"{{{ xolox/vim-session
:let g:session_autosave = 'no'
"}}}

"{{{ Limelight and Goyo - Distraction Free Writing
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!
"}}}

"{{{ TagBar definitions for Obj-C and CSS
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_objcpp = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
"}}}

