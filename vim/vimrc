"{{{1 Install Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

"{{{1 Begin Plugins section
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
"{{{2 Plugins - Code Complete and Snippets
" The Tab key will, depending on the context, offer Vim's local keyword, file path, omni-completion after typing a period or an arrow operator
Plug 'ajh17/VimCompletesMe'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' " inserts code snippets | collection of code snippets
Plug 'mattn/emmet-vim'
"{{{2 Plugins - File Navigation
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Quickly find file in the path and buffers with fuzzy find support
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
"{{{2 Plugins - Motion Enhancements
Plug 'justinmk/vim-sneak' " Use s{char}{char} or S{char}{char}
"{{{2 Plugins - Session Management
Plug 'xolox/vim-misc' | Plug 'xolox/vim-session'
Plug 'moll/vim-bbye' " Delete buffers and close files without messing up your layout
"{{{2 Plugins - Syntax files and Programming Languages
Plug 'Chiel92/vim-autoformat'
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'
Plug 'ihacklog/HiCursorWords' " highlights words under the cursor like many IDEs
"{{{2 Plugins - Typing Utilities
Plug 'tpope/vim-rsi' " Readline key bindings
Plug 'junegunn/vim-easy-align' " Vim alignment"
Plug 'tpope/vim-characterize' " press ga to reveal characters representation in decimal, octal and hex
Plug 'junegunn/vim-peekaboo' " show content of register
Plug 'Raimondi/delimitMate' " Auto close feature
Plug 'tpope/vim-surround' " to make quoting and parenthesizing easier
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary' " toggle comments
Plug 'tpope/vim-endwise'
Plug 'terryma/vim-multiple-cursors'
"{{{2 Plugins - Distraction Free Writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'chrisbra/NrrwRgn' " focus on a region and make the rest inaccessible. Select and call :NR
"{{{2 Plugins - Document Outline
" |Voom|
Plug 'VOoM' " View and change file outline
"{{{2 Plugins - Utilities and Wrappers
Plug 'guns/xterm-color-table.vim' " :XtermColorTable to show all 256 xterm colors with their RGB equivalents
Plug 'DrawIt' " Draw ASCII art in Vim
Plug 'tpope/vim-eunuch' " Wrapper for UNIX shell commands
Plug 'henrik/vim-indexed-search' " Show 'Match 123 of 456 <search term>' in Vim searches
Plug 'osyo-manga/vim-over' " :substitute preview
Plug 'romainl/vim-qf' " a collection of settings, commands and mappings for the quickfix window
Plug 'romainl/vim-qlist' " make include-search and definition-search populate in the quickfix window
Plug 'wakatime/vim-wakatime'
"{{{2 Plugins - Version Control and File Comparison
Plug 'chrisbra/vim-diff-enhanced' " Enhanced Diff for git diff --patience
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'junegunn/gv.vim' " Git commit browser
Plug 'mbbill/undotree' " Browse the undo tree
"{{{2 Plugins - Theme
Plug 'dracula/vim'

" All of your Plugins must be added before the following line
call plug#end()            " required
" End Plugins section }}}
"{{{1 Custom Functions
" from https://www.vi-improved.org/recommendations/
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" from https://jordanelver.co.uk/blog/2015/05/27/working-with-vim-colorschemes/#showing-highlight-groups
nmap <leader>hg :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

"{{{1 Customize Vim
"{{{2 Miscellaneous Variables
set expandtab
set guioptions+=b " make sure horizontal scroll bar is visible
set number
set shiftwidth=4
set softtabstop=4
set tabstop=4
set wrap
set ignorecase " Search settings
set hlsearch " Highlight search results
"{{{2 Spelling
set spell " Enable spell check
set spellfile=~/.vim/spell/en.utf-8.add " Store all good words in this file
" Generate a binary spell file from text spell file. Vim does it automatically
" whenever a word is added. But when spell file is added externally, you
" need to generate it once
if empty(glob(&spellfile.'.spl'))
    exec 'mkspell!' &spellfile
endif
"{{{2 Preserve file history
set undofile " write undo history to file so that undo history remains persistent
set backup " Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set writebackup " Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set swapfile " Use a swap file for the buffer.

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif

set backupdir^=~/.vimTemp// " directory for backup files
set directory^=~/.vimTemp// " directory for swap files
set undodir^=~/.vimTemp// " directory for undo history

"{{{2 Disable Beeping
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"{{{2 Command Line Completion
" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu

"{{{2 Theme Settings
color dracula " https://github.com/dracula/vim/blob/master/colors/dracula.vim
set guifont=Inconsolata:h14

highlight StatusLine ctermfg=231 ctermbg=61 cterm=bold guifg=#f8f8f2 guibg=#6272a4 gui=bold
highlight StatusLineNC ctermfg=231 ctermbg=243 cterm=NONE guifg=#f8f8f2 guibg=#64666d gui=NONE
set statusline=%F\ %m%r%h%w\ [%L][%p%%][%04l,%04v]\ [%{&ff}]%y

highlight Search ctermfg=17 ctermbg=228 cterm=NONE guifg=#282a36 guibg=#f1fa8c gui=NONE " Use IncSearch style of dracula

"{{{2 Set Default settings for file types
autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown
autocmd FileType gitcommit set colorcolumn=72 " highlight 72nd column in git commit

"{{{2 Use ag instead of grep
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"{{{1 Plugins Customizations
"{{{2 vim-autoformat
let g:formatdef_fmt_custom_xml = '"tidy -xml -q --show-errors 0 --show-warnings 0 --indent-attributes 1"'
let g:formatters_xml = ['fmt_custom_xml']
let g:autoformat_verbosemode=1
"{{{2 ultisnips
let g:UltiSnipsExpandTrigger = '<c-tab>'
let g:UltiSnipsListSnippets = '<m-tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'my_UltiSnips' ]
set rtp+=~/.vim/my_snippets

"{{{2 Voom
"*Voom*
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
autocmd FileType voomtree setlocal nonumber

"{{{2 xolox/vim-session
let g:session_autosave = 'no'

"{{{2 Limelight and Goyo - Distraction Free Writing
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!

"{{{2 Vim Completes Me
autocmd FileType text,markdown let b:vcm_tab_complete = 'dict' "Offer tab completion from dictionary
"{{{2 Vim Easy Align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"{{{1 Vim modeline 
" vim:set foldmethod=marker:
