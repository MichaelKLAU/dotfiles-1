" Install Vim-Plug                                                            {{{1
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Begin Plugins section                                                       {{{1
call plug#begin('~/.vim/plugged')

Plug 'dahu/bisectly'
Plug 'tpope/vim-sensible'
Plug 'gkirilov/hardmode'
Plug 'embear/vim-localvimrc'
Plug 'tpope/vim-speeddating'
" Plugins - Code Complete and Snippets                                        {{{2
" The Tab key will, depending on the context, offer Vim's local keyword, file path, omni-completion after typing a period or an arrow operator
" Plug 'ajh17/VimCompletesMe'
" if (has('nvim'))
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"             \ | Plug 'zchee/deoplete-clang'
"             \ | Plug 'Shougo/neoinclude.vim'
"             \ | Plug 'Shougo/neco-syntax'
"             \ | Plug 'Shougo/neco-vim'
"             \ | Plug 'carlitux/deoplete-ternjs'
" endif
" Plugins - File Navigation                                                   {{{2
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Quickly find file in the path and buffers with fuzzy find support
Plug 'junegunn/fzf.vim'
" Plugins - Motion Enhancements                                               {{{2
Plug 'justinmk/vim-sneak' " Use s{char}{char} or S{char}{char}
" Plugins - Session Management                                                {{{2
Plug 'xolox/vim-misc' | Plug 'xolox/vim-session'
Plug 'moll/vim-bbye' " Delete buffers and close files without messing up your layout
" Plugins - Syntax files and Programming Languages                            {{{2
Plug 'Chiel92/vim-autoformat'
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'
Plug 'ihacklog/HiCursorWords' " highlights words under the cursor like many IDEs
" Plugins - Typing Utilities                                                  {{{2
Plug 'tpope/vim-rsi' " Readline key bindings
Plug 'junegunn/vim-easy-align' " Vim alignment
Plug 'tpope/vim-characterize' " press ga to reveal characters representation in decimal, octal and hex
Plug 'Raimondi/delimitMate' " Auto close feature
Plug 'tpope/vim-surround' " to make quoting and parenthesizing easier
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary' " toggle comments
Plug 'tpope/vim-endwise'
Plug 'terryma/vim-multiple-cursors'
" Plugins - Distraction Free Writing                                          {{{2
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'chrisbra/NrrwRgn' " focus on a region and make the rest inaccessible. Select and call :NR
" Plugins - Document Outline                                                  {{{2
Plug 'VOoM' " View and change file outline
" Plugins - Utilities and Wrappers                                            {{{2
Plug 'guns/xterm-color-table.vim' " :XtermColorTable to show all 256 xterm colors with their RGB equivalents
Plug 'DrawIt' " Draw ASCII art in Vim
Plug 'tpope/vim-eunuch' " Wrapper for UNIX shell commands
Plug 'henrik/vim-indexed-search' " Show 'Match 123 of 456 <search term>' in Vim searches
Plug 'osyo-manga/vim-over' " :substitute preview
Plug 'romainl/vim-qf' " a collection of settings, commands and mappings for the quickfix window
Plug 'romainl/vim-qlist' " make include-search and definition-search populate in the quickfix window
Plug 'wakatime/vim-wakatime'
" Plugins - Version Control and File Comparison                               {{{2
Plug 'chrisbra/vim-diff-enhanced' " Enhanced Diff for git diff --patience
" Git wrapper Plug
Plug 'tpope/vim-fugitive'
            \ | Plug 'junegunn/gv.vim'
Plug 'airblade/vim-gitgutter'
Plug 'mbbill/undotree' " Browse the undo tree
" Plugins - Theme                                                             {{{2
Plug 'dracula/vim'

" All of your Plugins must be added before the following line
call plug#end()            " required
" End Plugins section }}}
" Custom Functions                                                            {{{1
" from https://www.vi-improved.org/recommendations/
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" from https://jordanelver.co.uk/blog/2015/05/27/working-with-vim-colorschemes/#showing-highlight-groups
nmap <leader>hg :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

" Customize Vim                                                               {{{1
" Miscellaneous Variables                                                     {{{2
set expandtab
set guioptions+=b " make sure horizontal scroll bar is visible
set number
set shiftwidth=4
set softtabstop=4
set tabstop=4
set wrap
set ignorecase " Search settings
set hlsearch " Highlight search results
set noerrorbells visualbell t_vb= " Disable Beeping
" Spelling                                                                    {{{2
set spellfile=~/.vim/spell/en.utf-8.add " Store all good words in this file
" Generate a binary spell file from text spell file. Vim does it automatically
" whenever a word is added. But when spell file is added externally, you
" need to generate it once
if empty(glob(&spellfile.'.spl'))
    exec 'mkspell!' &spellfile
endif

" Use <C-P> to toogle spell check in the current buffer
if maparg('<C-P>', 'n') ==# ''
  nnoremap <silent> <C-P> :setlocal spell!<CR>
endif
" Preserve file history                                                       {{{2
set undofile " write undo history to file so that undo history remains persistent
set backup " Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set writebackup " Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set swapfile " Use a swap file for the buffer.

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif

set backupdir^=~/.vimTemp// " directory for backup files
set directory^=~/.vimTemp// " directory for swap files
set undodir^=~/.vimTemp// " directory for undo history


" Command Line Completion                                                     {{{2
" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu

" Theme Settings                                                              {{{2
color dracula " https://github.com/dracula/vim/blob/master/colors/dracula.vim
set guifont=Inconsolata:h14

highlight StatusLine ctermfg=231 ctermbg=61 cterm=bold guifg=#f8f8f2 guibg=#6272a4 gui=bold
highlight StatusLineNC ctermfg=231 ctermbg=243 cterm=NONE guifg=#f8f8f2 guibg=#64666d gui=NONE
set statusline=%F\ %m%r%h%w\ [%L][%p%%][%04l,%04v]\ [%{&ff}]%y\ %{fugitive#statusline()}

highlight Search ctermfg=17 ctermbg=250 cterm=NONE guifg=#282a36 guibg=#f1fa8c gui=NONE
highlight Pmenu ctermfg=NONE ctermbg=242 cterm=NONE guifg=NONE guibg=NONE gui=NONE

set cursorline
set cursorcolumn

" Use ag instead of grep                                                      {{{2
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Plugins Customizations                                                      {{{1
" vim-autoformat                                                              {{{2
let g:formatdef_fmt_custom_xml = '"tidy -xml -q --show-errors 0 --show-warnings 0 --indent-attributes 1"'
let g:formatters_xml = ['fmt_custom_xml']
let g:autoformat_verbosemode=1

" Voom                                                                        {{{2
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
augroup plugin_voom
    autocmd!
    autocmd FileType voomtree setlocal nonumber
augroup END

" xolox/vim-session                                                           {{{2
let g:session_autosave = 'no'

" Limelight and Goyo - Distraction Free Writing                               {{{2
augroup plugin_goyo
    autocmd!
    autocmd User GoyoEnter Limelight
    autocmd User GoyoLeave Limelight!
augroup END

" Vim Easy Align                                                              {{{2
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gl <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gl <Plug>(EasyAlign)

if (has('nvim'))
" deoplete                                                                    {{{2
let g:deoplete#enable_at_startup = 1
if (has('mac'))
	let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
	let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
endif
let g:deoplete#sources#clang#std = {'c': 'c11', 'cpp': 'c++1z', 'objc': 'c11', 'objcpp': 'c++1z'}
let g:deoplete#sources#clang#sort_algo = 'priority'
endif

" gitgutter                                                                   {{{2
set updatetime=200
nnoremap <Leader>hl :GitGutterLineHighlightsToggle <CR>

" HardMode                                                                    {{{2
let g:hardmode = 1 " Always enable hard mode

" FileType related settings                                                   {{{1
augroup filetype_related_settings
    autocmd!
    autocmd FileType objc,objcpp,cpp,c setlocal foldmethod=syntax
    autocmd FileType objcpp setlocal cindent
    autocmd FileType gitcommit setlocal colorcolumn=72 " highlight 72nd column in git commit
    if (has('mac'))
        autocmd FileType gitcommit,markdown,text setlocal dictionary=/usr/share/dict/words
    endif
augroup END

" Vim modeline                                                                {{{1
" vim:set foldmethod=marker foldlevel=1:
