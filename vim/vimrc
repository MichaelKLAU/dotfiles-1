" Begin Vundle section

set nocompatible               " be iMproved
filetype on
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
" to add Vim-markdown support
Bundle 'tpope/vim-markdown'
" A code-completion engine
Bundle 'Valloric/YouCompleteMe'
" to view and change file outline
Bundle 'VOoM'
" to quickly find file in the path and buffers with fuzzy find support
Bundle 'kien/ctrlp.vim'
" to have auto close feature
Bundle 'Townk/vim-autoclose'
" to make quoting and parenthesizing easier
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
" to draw ASCII art in Vim
Bundle 'DrawIt'
" Vim regex tutor
Bundle 'dahu/VimRegexTutor'
" Vim syntax file for tmux configuration
Bundle 'zaiste/tmux.vim'
" to browse the undo tree
Bundle 'sjl/gundo.vim'
" my todo plugin
Bundle 'talha131/todo-plus'
" maze generator for practising hjkl in Vim
Bundle 'dahu/Vimazing'
" WriteRoom like env in Vim http://projects.mikewest.org/vimroom/
Bundle 'mikewest/vimroom'
" Syntax checking
Bundle 'scrooloose/syntastic'
" integrates Python documentation system into Vim
Bundle 'fs111/pydoc.vim'
" Use rope -Python refactoring library
Bundle 'sontek/rope-vim'
" tree explorer
Bundle 'scrooloose/nerdtree'
" style checker
Bundle 'nvie/vim-flake8'
" Airline statusline
Bundle 'bling/vim-airline'
" Easy motion. Allows you to jump to motion or search targets with single key
" press
Bundle 'Lokaltog/vim-easymotion'
" Work with shell commands inside Vim. Pipe file contents to shell commands or
" run shell commands on file content.
Bundle 'sjl/clam.vim'
" A Suggested Path for Learning Vim
Bundle 'dahu/LearnVim'
" Create a new file, write .LOG as the first line and save it. Every time you reopen
" the file, a new line with the current timestamp is added, so you can easily maintain
" a chronologic log of your tasks.
Bundle 'talha131/logpad-plus-duration'
" focus on a region and make the rest inaccessible
Bundle 'chrisbra/NrrwRgn'
" Git wrapper
Bundle 'tpope/vim-fugitive'
" inserts code snippets
Bundle 'SirVer/ultisnips'
" collection of code snippets
Bundle 'honza/vim-snippets'
" browse the tags of source code files. TagbarToggle
Bundle 'majutsushi/tagbar'
" comments plugin
Bundle 'tomtom/tcomment_vim'
" session management
Bundle 'xolox/vim-session'
" vim-session requirement
Bundle 'xolox/vim-misc'

filetype plugin indent on     " required!

" End Vundle section

autocmd BufRead,BufNewFile  *.txt,*.TXT set filetype=markdown

" set fonts
if has("win32")
   set guifont=Lucida_Console:h11:cANSI
else
  set guifont=Menlo\ Regular\ for\ Powerline:h14
endif

" make sure horizontal scroll bar is visible
set guioptions+=b

if !has("gui_running")
  set term=screen-256color
endif

set number
set expandtab
set wrap
syntax on
set autoindent
set softtabstop=4
set shiftwidth=4

" write undo history to file so that undo history remains persistent
set undofile
" Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set backup
" Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set writebackup
" Use a swapfile for the buffer.
set swapfile

" directory for backup files
set backupdir^=~/.vimTemp//
" directory for swap files
set directory^=~/.vimTemp//
" directory for undo history
set undodir^=~/.vimTemp//

" remember x number of commands executed previously
set history=100

colorscheme beauty256Talha

"Always show current position
set ruler

" highlight search results
set hlsearch
" Makes search incremental
set incsearch
set ignorecase

" Enable spell check
set spell
" highlight spelling mistakes
highlight clear SpellBad
highlight SpellBad cterm=underline, ctermfg=red
highlight SpellBad gui=undercurl, guisp=red
highlight clear SpellCap
highlight SpellCap cterm=underline,bold, ctermfg=green
highlight SpellCap gui=undercurl guisp=DarkCyan

" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu

" for :shell, from [SO answer](http://stackoverflow.com/a/12273438/177116)
" Otherwise I get error
" > __git_ps1: command not found
set shell=bash\ --rcfile\ ~/.bashrc

" for ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <c-p>o :CtrlPBuffer<CR>
nmap <c-p>l :CtrlPMRUFiles<CR>
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 30
let b:ctrlp_working_path_mode = 'ra'
let g:ctrlp_dotfiles = 0
" let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|
"             \ public\/system\|data\|log\|\tmp$\|\.exe$\|\.so$\|\.dat$\|Library\|
"             \ Music\|Movies\|Pictures\|\.pdf$\|\.epub$\|\.mobi$\|\.rar$\|\.png$\|
"             \ \.jpg$\|\.dmg$\|\.nib$\|\.bz$\|\.gz$\|\.tar$\|\.xib$'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$
            \ |(Desktop|Libary|Music|Movies|Pictures)',
            \ 'file': '\v\.(jpg|png|gif|psd|jpeg
            \ |exe|so|o|dat|dmg|nib|xib|bat|egg|cer|DS_Store|pkg
            \ |tar|bz|gz|zip|rar|iso|cdr|bz2
            \ |mp3|mp4|mov|avi|flv|torrent|wmv
            \ |pdf|epub|mobi|chm|doc|docx|lit|gdoc)$'
            \ }

" for gundo plugin
let g:gundo_preview_bottom=1
let g:gundo_preview_height=25
let g:gundo_close_on_revert=1

" add angle bracket and pipe to the list to auto close pairs
let g:AutoClosePairs_add = "<> |"

" vim room settings
let g:vimroom_guibackground = "White"

" Vim as Python IDE
set foldmethod=indent
set foldlevel=99

" Airline statusline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'

" highlight 72th column in git commit
autocmd FileType gitcommit set colorcolumn=72

" execute :startinsert when a new log entry is created.
" default for plugin is to start insertmode.
let LogpadInsert = 1
let LogpadLogDuration = 1

" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.jpg$']
let blacklist = ['gitcommit',  'gitrebase']
autocmd vimenter * if index(blacklist, &ft) < 0 | NERDTree
autocmd BufEnter * if index(blacklist, &ft) < 0 | silent! cd %:p:h
autocmd BufEnter * if &modifiable && index(blacklist, &ft) < 0 | silent! NERDTreeCWD | wincmd p | endif

" ultisnips
let g:UltiSnipsExpandTrigger = '<c-tab>'
let g:UltiSnipsListSnippets = '<m-tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'my_UltiSnips' ]
set rtp+=~/.vim/my_snippets

" Voom
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
autocmd FileType voomtree setlocal nonumber
